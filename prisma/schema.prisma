// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId String @id
  name   String
  email  String
}

model Branches {
  branchId String     @id @default(uuid())
  name     String
  location String
  products Products[]
}

model Products {
  productId   String        @id
  name        String
  price       Float
  rating      Float?
  branchId    String?
  branch      Branches?     @relation(fields: [branchId], references: [branchId], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  Purchases   Purchases[]
  description String?
  sizes       ProductSize[] // Relación con los tamaños y stock específico por tamaño
  gender      String?
  SaleItems   SaleItems[]
}

model ProductSize {
  id            String   @id @default(uuid())
  size          String // XS, S, M, L, etc.
  stockQuantity Int // Cantidad de stock para ese tamaño
  product       Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId     String
}

model Sales {
  saleId        String        @id @default(cuid())
  date          DateTime      @default(now())
  totalAmount   Float
  paymentMethod PaymentMethod @default(CASH)
  saleItems     SaleItems[]
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAYMENT
  // Agrega más métodos de pago en el futuro
}

model SaleItems {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  size      String
  productId String
  product   Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
  saleId    String
  sale      Sales    @relation(fields: [saleId], references: [saleId], onDelete: Cascade)
}

model Purchases {
  purchaseId String   @id
  productId  String
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}
